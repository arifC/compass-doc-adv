scalar Any 

scalar JSON 

scalar Timestamp 

scalar Tenant 

scalar HttpHeaders 

scalar QueryParams 

scalar CLOB 

scalar PageCursor 

type Label {
    key: String!
    value: Any!
}

scalar Labels 

type LabelDefinition {
    key: String!
    schema: JSON
}

input LabelDefinitionInput {
    key: String!
    schema: JSON
}

# Clusters running Kyma and a Compass agent.
type Runtime {
    id: ID!
    name: String!
    description: String
    labels(key: String): Labels!
    status: RuntimeStatus!
    agentAuth: Auth!
}

# Current condition with the timestamp of the last change.
type RuntimeStatus {
    condition: RuntimeStatusCondition!
    timestamp: Timestamp!
}

enum RuntimeStatusCondition {
    INITIAL
    READY
    FAILED
}

# External systems outside Runtimes that expose APIs and Events. Applications are connected to runtimes to ensure trusted communication.
type Application {
    id: ID!
    name: String!
    description: String
    labels(key: String): Labels!
    status: ApplicationStatus!
    webhooks: [Webhook!]!
    healthCheckURL: String
    # API exposed by Application
    apis(group: String, first: Int = 100, after: PageCursor): APIDefinitionPage!
    # Events exposes by Application
    eventAPIs(group: String, first: Int = 100, after: PageCursor): EventAPIDefinitionPage!
    # Describe the Application and its exposed APIs.
    documents(first: Int = 100, after: PageCursor): DocumentPage!
}

interface Pageable {
    pageInfo: PageInfo!
    totalCount: Int!
}

type PageInfo {
    startCursor: PageCursor!
    endCursor: PageCursor!
    hasNextPage: Boolean!
}

type ApplicationPage implements Pageable {
    data: [Application!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type RuntimePage implements Pageable {
    data: [Runtime!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type HealthCheckPage implements Pageable {
    data: [HealthCheck!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type APIDefinitionPage implements Pageable {
    data: [APIDefinition!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type EventAPIDefinitionPage implements Pageable {
    data: [EventAPIDefinition!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type DocumentPage implements Pageable {
    data: [Document!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ApplicationStatus {
    condition: ApplicationStatusCondition!
    timestamp: Timestamp!
}

enum ApplicationStatusCondition {
    INITIAL
    UNKNOWN
    READY
    FAILED
}

# An address of an Application for callbacks and asynchronous information exchange.
type Webhook {
    id: ID!
    applicationID: ID!
    type: ApplicationWebhookType!
    url: String!
    auth: Auth
}

enum ApplicationWebhookType {
    CONFIGURATION_CHANGED
}

type Version {
    value: String!
    deprecated: Boolean
    deprecatedSince: String
    forRemoval: Boolean
}

type APIDefinition {
    id: ID!
    applicationID: ID!
    name: String!
    description: String
    spec: APISpec
    targetURL: String!
    group: String
    auth(runtimeID: ID!): RuntimeAuth
    auths: [RuntimeAuth!]!
    defaultAuth: Auth
    version: Version
}

type RuntimeAuth {
    runtimeID: ID!
    auth: Auth
}

# Contains the data, format, and type of the technical specification.
type APISpec {
    data: CLOB
    format: SpecFormat!
    type: APISpecType!
    fetchRequest: FetchRequest
}

enum SpecFormat {
    YAML
    JSON
}

enum APISpecType {
    ODATA,
    OPEN_API
}

enum EventAPISpecType {
    ASYNC_API
}

# Contains the data, format, and type of the technical specification.
type EventAPIDefinition {
    id: ID!
    applicationID: ID!
    name: String!
    description: String
    group: String
    spec: EventAPISpec!
    version: Version
}

type EventAPISpec {
    data: CLOB
    type: EventAPISpecType!
    format: SpecFormat!
    fetchRequest: FetchRequest
}

# Describes attached information for Applications such as technical documentations.
type Document {
    id: ID!
    applicationID: ID!
    title: String!
    displayName: String!
    description: String!
    format: DocumentFormat!
    kind: String
    data: CLOB
    fetchRequest: FetchRequest
}

enum DocumentFormat {
    MARKDOWN
}

type FetchRequest {
    url: String!
    auth: Auth
    mode: FetchMode!
    filter: String
    status: FetchRequestStatus!
}

type FetchRequestStatus {
    condition: FetchRequestStatusCondition!
    timestamp: Timestamp!
}

enum FetchRequestStatusCondition {
    INITIAL
    SUCCEEDED
    FAILED
}

enum FetchMode {
    SINGLE
    PACKAGE
    INDEX
}

# Authentication method for Runtimes
type Auth {
    credential: CredentialData!
    additionalHeaders: HttpHeaders
    additionalQueryParams: QueryParams
    requestAuth: CredentialRequestAuth
}

union CredentialData = BasicCredentialData | OAuthCredentialData

type OAuthCredentialData {
    clientId: ID!
    clientSecret: String!
    url: String!
}

type BasicCredentialData {
    username: String!
    password: String!
}

type CredentialRequestAuth {
    csrf: CSRFTokenCredentialRequestAuth
}

type CSRFTokenCredentialRequestAuth {
    tokenEndpointURL: String!
    credential: CredentialData!
    additionalHeaders: HttpHeaders
    additionalQueryParams: QueryParams
}

enum HealthCheckStatusCondition {
    SUCCEEDED
    FAILED
}

enum HealthCheckType {
    MANAGEMENT_PLANE_APPLICATION_HEALTHCHECK
}

type HealthCheck {
    type: HealthCheckType!
    condition: HealthCheckStatusCondition!
    origin: ID
    message: String
    timestamp: Timestamp!
}

input ApplicationInput {
    name: String!
    description: String
    labels: Labels
    webhooks: [WebhookInput!]
    healthCheckURL: String
    apis: [APIDefinitionInput!]
    eventAPIs: [EventAPIDefinitionInput!]
    documents: [DocumentInput!]
}

input RuntimeInput {
    name: String!
    description: String
    labels: Labels
}

input FetchRequestInput {
    url: String!
    auth: AuthInput
    mode: FetchMode = SINGLE
    filter: String
}

input WebhookInput {
    type: ApplicationWebhookType!
    url: String!
    auth: AuthInput
}

input APIDefinitionInput {
    name: String!
    description: String
    targetURL: String!
    group: String
    spec: APISpecInput
    version: VersionInput
    defaultAuth: AuthInput
}

input VersionInput {
    value: String!
    deprecated: Boolean = false
    deprecatedSince: String
    forRemoval: Boolean = false
}

input APISpecInput {
    data: CLOB
    type: APISpecType!
    format: SpecFormat!
    fetchRequest: FetchRequestInput
}

input EventAPIDefinitionInput {
    name: String!
    description: String
    spec: EventAPISpecInput!
    group: String
    version: VersionInput
}

input EventAPISpecInput {
    data: CLOB
    eventSpecType: EventAPISpecType!
    format: SpecFormat!
    fetchRequest: FetchRequestInput
}

input DocumentInput {
    title: String!
    displayName: String!
    description: String!
    format: DocumentFormat!
    kind: String
    data: CLOB
    fetchRequest: FetchRequestInput
}

input AuthInput {
    credential: CredentialDataInput!
    additionalHeaders: HttpHeaders
    additionalQueryParams: QueryParams
    requestAuth: CredentialRequestAuthInput
}

input CredentialRequestAuthInput {
    csrf: CSRFTokenCredentialRequestAuthInput
}

input CSRFTokenCredentialRequestAuthInput {
    tokenEndpointURL: String!
    credential: CredentialDataInput!
    additionalHeaders: HttpHeaders
    additionalQueryParams: QueryParams
}

input CredentialDataInput {
    basic: BasicCredentialDataInput
    oauth: OAuthCredentialDataInput
}

input OAuthCredentialDataInput {
    clientId: ID!
    clientSecret: String!
    url: String!
}

input BasicCredentialDataInput {
    username: String!
    password: String!
}

input LabelFilter {
    key: String!
    query: String
}

type Query {
    applications(filter: [LabelFilter!], first: Int = 100, after: PageCursor):  ApplicationPage!
    application(id: ID!): Application

    runtimes(filter: [LabelFilter!], first: Int = 100, after: PageCursor): RuntimePage!
    runtime(id: ID!): Runtime

    labelDefinitions: [LabelDefinition!]!
    labelDefinition(key: String!): LabelDefinition

    healthChecks(types: [HealthCheckType!], origin: ID, first: Int = 100, after: PageCursor): HealthCheckPage!
}

type Mutation {
    createApplication(in: ApplicationInput!): Application!
    updateApplication(id: ID!, in: ApplicationInput!): Application!
    deleteApplication(id: ID!): Application

    createRuntime(in: RuntimeInput!): Runtime!
    updateRuntime(id: ID!, in: RuntimeInput!): Runtime!
    deleteRuntime(id: ID!): Runtime

    addWebhook(applicationID: ID!, in: WebhookInput!): Webhook!
    updateWebhook(webhookID: ID!, in: WebhookInput!): Webhook!
    deleteWebhook(webhookID: ID!): Webhook

    addAPI(applicationID: ID!, in: APIDefinitionInput!): APIDefinition!
    updateAPI(id: ID!, in: APIDefinitionInput!): APIDefinition!
    deleteAPI(id: ID!): APIDefinition
    refetchAPISpec(apiID: ID!): APISpec

    setAPIAuth(apiID: ID!, runtimeID: ID!, in: AuthInput!): RuntimeAuth!
    deleteAPIAuth(apiID: ID!, runtimeID: ID!): RuntimeAuth!

    addEventAPI(applicationID: ID!, in: EventAPIDefinitionInput!): EventAPIDefinition!
    updateEventAPI(id: ID!, in: EventAPIDefinitionInput!): EventAPIDefinition!
    deleteEventAPI(id: ID!): EventAPIDefinition
    refetchEventAPISpec(eventID: ID!): EventAPISpec

    addDocument(applicationID: ID!, in: DocumentInput!): Document!
    deleteDocument(id: ID!): Document

    createLabelDefinition(in: LabelDefinitionInput!): LabelDefinition!
    updateLabelDefinition(in: LabelDefinitionInput!): LabelDefinition!
    deleteLabelDefinition(key: String!, deleteRelatedLabels: Boolean=false): LabelDefinition!
    
    setApplicationLabel(applicationID: ID!, key: String!, value: Any!): Label!
    deleteApplicationLabel(applicationID: ID!, key: String!): Label!

    setRuntimeLabel(runtimeID: ID!, key: String!, value: Any!): Label!
    deleteRuntimeLabel(runtimeID: ID!, key: String!): Label!
}
